import os
import yt_dlp
import requests
import re
import urllib.parse
import json
import time
import subprocess
import sys
from datetime import datetime

def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===")
    
    required_packages = {
        'yt_dlp': 'yt-dlp',
        'requests': 'requests'
    }
    
    missing_packages = []
    
    for package_name, pip_name in required_packages.items():
        try:
            __import__(package_name)
            print(f"‚úì {package_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_packages.append((package_name, pip_name))
            print(f"‚ùå {package_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if missing_packages:
        print(f"\n–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã...")
        for package_name, pip_name in missing_packages:
            try:
                print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package_name}...")
                subprocess.check_call(['brew', 'install', 'python-' + pip_name])
                print(f"‚úì {package_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package_name}: {e}")
                return False
    
    print("‚úì –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã\n")
    return True

def update_yt_dlp():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç yt-dlp –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"""
    print("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï YT-DLP ===")
    try:
        print("–û–±–Ω–æ–≤–ª—è—é yt-dlp...")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'yt-dlp'])
        print("‚úì yt-dlp —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ yt-dlp –≤ PATH
        user_bin_path = os.path.expanduser('~/Library/Python/3.9/bin')
        if user_bin_path not in os.environ.get('PATH', ''):
            os.environ['PATH'] = user_bin_path + ':' + os.environ.get('PATH', '')
            print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ yt-dlp –≤ PATH: {user_bin_path}")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ yt-dlp: {e}")
        return False

def check_tor_connection(port=9150):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tor"""
    try:
        import requests
        proxies = {
            'http': f'socks5h://127.0.0.1:{port}',
            'https': f'socks5h://127.0.0.1:{port}'
        }
        
        response = requests.get('https://check.torproject.org/', proxies=proxies, timeout=15)
        if 'Congratulations' in response.text:
            print(f"‚úì Tor —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return True
        else:
            print(f"‚ùå Tor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tor –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        return False

def configure_system_tor():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π Tor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SOCKS –ø—Ä–æ–∫—Å–∏"""
    try:
        torrc_path = '/usr/local/etc/tor/torrc'
        torrc_content = """SocksPort 9050
DataDirectory /usr/local/var/lib/tor
"""
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs('/usr/local/etc/tor', exist_ok=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(torrc_path, 'w') as f:
            f.write(torrc_content)
        
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Tor: {e}")
        return False

def start_tor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Tor –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç—É"""
    print("=== –ü–†–û–í–ï–†–ö–ê TOR ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Tor –Ω–∞ –ø–æ—Ä—Ç—É 9150
    if check_tor_connection(9150):
        return 9150
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Tor –Ω–∞ –ø–æ—Ä—Ç—É 9050
    if check_tor_connection(9050):
        return 9050
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Tor Browser
    print("Tor –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Tor Browser...")
    
    # –ü—É—Ç–∏ –∫ Tor Browser –Ω–∞ macOS
    tor_paths = [
        '/Applications/Tor Browser.app/Contents/MacOS/firefox',
        os.path.expanduser('~/Applications/Tor Browser.app/Contents/MacOS/firefox'),
        '/Applications/Tor Browser.app/Contents/MacOS/tor'
    ]
    
    for tor_path in tor_paths:
        if os.path.exists(tor_path):
            try:
                print(f"–ó–∞–ø—É—Å–∫–∞—é Tor Browser: {tor_path}")
                subprocess.Popen([tor_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                
                # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Tor
                print("–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Tor...")
                for i in range(30):  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
                    time.sleep(1)
                    if check_tor_connection(9150):
                        print("‚úì Tor Browser —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                        return 9150
                    if check_tor_connection(9050):
                        print("‚úì Tor Browser —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                        return 9050
                
                print("‚ùå Tor Browser –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
                break
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Tor Browser: {e}")
                continue
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π Tor
    print("–ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π Tor...")
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Tor –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if configure_system_tor():
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Tor —Å–µ—Ä–≤–∏—Å
            subprocess.check_call(['brew', 'services', 'restart', 'tor'])
            time.sleep(10)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            
            if check_tor_connection(9050):
                print("‚úì –°–∏—Å—Ç–µ–º–Ω—ã–π Tor —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                return 9050
            else:
                print("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–π Tor –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Tor")
            
    except subprocess.CalledProcessError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π Tor")
    
    return None

def get_project_name():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    while True:
        name = input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ').strip()
        if name:
            return name
        print('–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')

def is_youtube_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ YouTube —Å—Å—ã–ª–∫–æ–π"""
    return 'youtube.com' in url or 'youtu.be' in url

def get_video_title(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube"""
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return info.get('title', 'Unknown Title')
    except Exception as e:
        print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {e}")
        return 'Unknown Title'

def sanitize_filename(filename):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = re.sub(r'\s+', '_', filename)
    filename = re.sub(r'_+', '_', filename)
    
    return filename.strip('_')

def download_youtube_video(url, display_name, download_dir, error_file_path, tor_port=None):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç YouTube –≤–∏–¥–µ–æ"""
    try:
        print(f"–°–∫–∞—á–∏–≤–∞—é: {display_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_title = get_video_title(url)
        print(f"  üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_title}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞: {display_name}_{video_title}
        safe_video_title = sanitize_filename(video_title)
        filename_template = f"{display_name}_{safe_video_title}.%(ext)s"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
        ydl_opts = {
            'outtmpl': os.path.join(download_dir, filename_template),
            'concurrent_fragment_downloads': 8,
            'fragment_retries': 10,
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4',
            'merge_output_format': 'mp4',
            'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º Tor –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if tor_port:
            TOR_PROXY = f'socks5h://127.0.0.1:{tor_port}'
            ydl_opts['proxy'] = TOR_PROXY
            print(f"  üîó –ò—Å–ø–æ–ª—å–∑—É—é Tor –ø—Ä–æ–∫—Å–∏: {TOR_PROXY}")
        else:
            print(f"  ‚ö†Ô∏è  –°–∫–∞—á–∏–≤–∞—é –±–µ–∑ Tor –ø—Ä–æ–∫—Å–∏")
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        
        print(f"  ‚úì –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ")
        return True, video_title
        
    except Exception as e:
        error_msg = str(e)
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {error_msg}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_youtube_error(display_name, url, video_title, error_file_path)
        return False, video_title

def read_youtube_links(youtube_links_file):
    """–ß–∏—Ç–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏–∑ —Ñ–∞–π–ª–∞"""
    links = []
    
    try:
        with open(youtube_links_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        for line in lines:
            if line.startswith('#') or not line.strip():
                continue
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "A1 1 : https://youtube.com/..."
            parts = line.strip().split(' : ', 1)
            if len(parts) == 2:
                display_name = parts[0].strip()
                url = parts[1].strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ YouTube —Å—Å—ã–ª–∫–∞
                if is_youtube_url(url):
                    links.append({
                        'display_name': display_name,
                        'url': url
                    })
                else:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ-YouTube —Å—Å—ã–ª–∫—É: {url}")
        
        return links
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {youtube_links_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {youtube_links_file}: {e}")
        return []

def log_youtube_error(display_name, url, video_title, error_file_path):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è YouTube –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª"""
    try:
        with open(error_file_path, 'a', encoding='utf-8') as f:
            f.write(f"{display_name} : {url} : {video_title}\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –æ—à–∏–±–æ–∫: {e}")

def create_pull_tube_links(error_file_path, youtube_dir):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª pull_tube_links.txt –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    try:
        if not os.path.exists(error_file_path):
            print("–§–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ pull_tube_links.txt")
            return
        
        pull_tube_file = os.path.join(youtube_dir, 'pull_tube_links.txt')
        
        with open(error_file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        youtube_links = []
        for line in lines:
            if line.strip():
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "display_name : url : video_title"
                parts = line.strip().split(' : ', 2)
                if len(parts) >= 2:
                    url = parts[1].strip()
                    if is_youtube_url(url):
                        youtube_links.append(url)
        
        if youtube_links:
            with open(pull_tube_file, 'w', encoding='utf-8') as f:
                for url in youtube_links:
                    f.write(f"{url}\n")
            
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª pull_tube_links.txt —Å {len(youtube_links)} —Å—Å—ã–ª–∫–∞–º–∏")
        else:
            print("–í —Ñ–∞–π–ª–µ –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ YouTube —Å—Å—ã–ª–æ–∫")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ pull_tube_links.txt: {e}")

def main():
    print("=== –°–ö–†–ò–ü–¢ –°–ö–ê–ß–ò–í–ê–ù–ò–Ø YOUTUBE –í–ò–î–ï–û ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_and_install_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º yt-dlp
    if not update_yt_dlp():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å yt-dlp!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Tor
    tor_port = start_tor()
    if tor_port is None:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Tor. –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ Tor –ø—Ä–æ–∫—Å–∏.")
        tor_port = None
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_name = get_project_name()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    downloads_dir = os.path.expanduser('~/Downloads')
    download_all_dir = os.path.join(downloads_dir, 'download_all')
    project_dir = os.path.join(download_all_dir, project_name)
    parse_links_dir = os.path.join(project_dir, '1_parse_links')
    youtube_dir = os.path.join(project_dir, '3_youtube_video')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
    if not os.path.exists(parse_links_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {parse_links_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç 1_parse_links.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è YouTube –≤–∏–¥–µ–æ
    os.makedirs(youtube_dir, exist_ok=True)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ
    youtube_links_file = os.path.join(parse_links_dir, 'youtube_links.txt')
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–æ–∫
    error_file_path = os.path.join(youtube_dir, 'youtube_download_errors.txt')
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –æ—à–∏–±–æ–∫
    if os.path.exists(error_file_path):
        os.remove(error_file_path)
    
    print(f"\n=== –°–ö–ê–ß–ò–í–ê–ù–ò–ï YOUTUBE –í–ò–î–ï–û ===")
    print(f"–ü—Ä–æ–µ–∫—Ç: {project_name}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤–∏–¥–µ–æ: {youtube_dir}")
    print(f"–§–∞–π–ª —Å —Å—Å—ã–ª–∫–∞–º–∏: {youtube_links_file}")
    if tor_port:
        print("–í–∏–¥–µ–æ –±—É–¥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Tor –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    else:
        print("–í–∏–¥–µ–æ –±—É–¥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Tor)")
    
    # –ß–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ
    youtube_links = read_youtube_links(youtube_links_file)
    
    if not youtube_links:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ YouTube –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
        return
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(youtube_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ YouTube –≤–∏–¥–µ–æ")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    successful_downloads = 0
    failed_downloads = 0
    
    for i, link_info in enumerate(youtube_links, 1):
        print(f"\n[{i}/{len(youtube_links)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {link_info['display_name']}")
        
        success, video_title = download_youtube_video(
            link_info['url'], 
            link_info['display_name'], 
            youtube_dir, 
            error_file_path,
            tor_port
        )
        
        if success:
            successful_downloads += 1
        else:
            failed_downloads += 1
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1)
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ===")
    print(f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads}")
    print(f"–û—à–∏–±–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {failed_downloads}")
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(youtube_links)}")
    
    if failed_downloads > 0:
        print(f"\n–û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {error_file_path}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª pull_tube_links.txt –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
    create_pull_tube_links(error_file_path, youtube_dir)
    
    print(f"\n–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {youtube_dir}")

if __name__ == "__main__":
    main()
