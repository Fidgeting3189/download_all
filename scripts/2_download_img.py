import os
import requests
import re
from urllib.parse import urlparse
from datetime import datetime
import time
import subprocess
import sys

def extract_google_image_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Google Images"""
    if 'share.google' not in url and 'images.app.goo.gl' not in url:
        return url
    
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Upgrade-Insecure-Requests": "1"
        }
        
        print(f"  üîç –ò–∑–≤–ª–µ–∫–∞—é –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ Google Images...")
        response = requests.get(url, headers=headers, timeout=15, allow_redirects=True)
        
        if response.status_code == 200:
            print(f"  üìç –§–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {response.url}")
            
            # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä imgurl –≤ URL
            if 'imgurl=' in response.url:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º imgurl –ø–∞—Ä–∞–º–µ—Ç—Ä
                import urllib.parse
                parsed_url = urllib.parse.urlparse(response.url)
                query_params = urllib.parse.parse_qs(parsed_url.query)
                
                if 'imgurl' in query_params:
                    direct_url = query_params['imgurl'][0]
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
                    direct_url = urllib.parse.unquote(direct_url)
                    print(f"  ‚úì –ù–∞–π–¥–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {direct_url}")
                    return direct_url
                else:
                    print(f"  ‚ö†Ô∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä imgurl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL")
            else:
                print(f"  ‚ö†Ô∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä imgurl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ imgurl, –∏—â–µ–º –≤ HTML
            html_content = response.text
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
            import re
            img_patterns = [
                r'https://[^"\s]+\.(?:jpg|jpeg|png|gif|webp|bmp|tiff)',
                r'https://[^"\s]+\.(?:jpg|jpeg|png|gif|webp|bmp|tiff)\?[^"\s]*'
            ]
            
            for pattern in img_patterns:
                matches = re.findall(pattern, html_content, re.IGNORECASE)
                if matches:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    direct_url = matches[0]
                    print(f"  ‚úì –ù–∞–π–¥–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –≤ HTML: {direct_url}")
                    return direct_url
        
        print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é")
        return url
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return url

def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===")
    
    required_packages = {
        'requests': 'requests',
        'PIL': 'Pillow'
    }
    
    missing_packages = []
    
    for package_name, pip_name in required_packages.items():
        try:
            if package_name == 'PIL':
                import PIL
                print(f"‚úì {package_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                __import__(package_name)
                print(f"‚úì {package_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_packages.append((package_name, pip_name))
            print(f"‚ùå {package_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if missing_packages:
        print(f"\n–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã...")
        for package_name, pip_name in missing_packages:
            try:
                print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package_name}...")
                subprocess.check_call(['brew', 'install', 'python-' + pip_name])
                print(f"‚úì {package_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package_name}: {e}")
                return False
    
    print("‚úì –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã\n")
    return True

def convert_to_jpg(input_path, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPG —Ñ–æ—Ä–º–∞—Ç"""
    try:
        from PIL import Image
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(input_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RGBA)
            if img.mode in ('RGBA', 'LA', 'P'):
                # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'P':
                    img = img.convert('RGBA')
                background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JPG —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            img.save(output_path, 'JPEG', quality=95, optimize=True)
        
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def get_project_name():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    while True:
        name = input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ').strip()
        if name:
            return name
        print('–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')

def get_file_extension_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ URL"""
    parsed_url = urlparse(url)
    path = parsed_url.path
    
    # –ò—â–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –ø—É—Ç–∏
    if '.' in path:
        extension = path.split('.')[-1].lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if extension in ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp', 'tiff', 'svg']:
            return f'.{extension}'
    
    # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—É—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if 'format=' in url:
        format_match = re.search(r'format=([^&]+)', url)
        if format_match:
            format_val = format_match.group(1).lower()
            if format_val in ['jpg', 'jpeg', 'png', 'gif', 'webp']:
                return f'.{format_val}'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º .jpg
    return '.jpg'

def get_file_extension_from_headers(url):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        }
        response = requests.head(url, headers=headers, timeout=10, allow_redirects=True)
        
        if response.status_code == 200:
            content_type = response.headers.get('content-type', '').lower()
            
            if 'image/jpeg' in content_type or 'image/jpg' in content_type:
                return '.jpg'
            elif 'image/png' in content_type:
                return '.png'
            elif 'image/gif' in content_type:
                return '.gif'
            elif 'image/webp' in content_type:
                return '.webp'
            elif 'image/bmp' in content_type:
                return '.bmp'
            elif 'image/tiff' in content_type:
                return '.tiff'
            elif 'image/svg+xml' in content_type:
                return '.svg'
        
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è {url}: {e}")
        return None

def sanitize_filename(filename):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = re.sub(r'\s+', '_', filename)
    filename = re.sub(r'_+', '_', filename)
    
    return filename.strip('_')

def download_image(url, filename, download_dir):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ JPG"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Google Images
        direct_url = extract_google_image_url(url)
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        }
        
        print(f"–°–∫–∞—á–∏–≤–∞—é: {filename}")
        response = requests.get(direct_url, headers=headers, timeout=30, allow_redirects=True, stream=True)
        
        if response.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            content_type = response.headers.get('content-type', '').lower()
            if not content_type.startswith('image/'):
                print(f"  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {content_type} - –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            extension = get_file_extension_from_headers(url)
            if not extension:
                extension = get_file_extension_from_url(url)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            temp_filename = filename + extension
            temp_filepath = os.path.join(download_dir, temp_filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            counter = 1
            original_temp_filepath = temp_filepath
            while os.path.exists(temp_filepath):
                name_without_ext = os.path.splitext(original_temp_filepath)[0]
                ext = os.path.splitext(original_temp_filepath)[1]
                temp_filepath = f"{name_without_ext}_{counter}{ext}"
                counter += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(temp_filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ JPG
            final_filename = filename + '.jpg'
            final_filepath = os.path.join(download_dir, final_filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ JPG —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            counter = 1
            original_final_filepath = final_filepath
            while os.path.exists(final_filepath):
                name_without_ext = os.path.splitext(original_final_filepath)[0]
                final_filepath = f"{name_without_ext}_{counter}.jpg"
                counter += 1
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG
            if extension.lower() == '.jpg':
                # –ï—Å–ª–∏ —É–∂–µ JPG, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                os.rename(temp_filepath, final_filepath)
                print(f"  ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(final_filepath)}")
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG
                if convert_to_jpg(temp_filepath, final_filepath):
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(temp_filepath)
                    print(f"  ‚úì –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(final_filepath)}")
                else:
                    # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    print(f"  ‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {os.path.basename(temp_filepath)}")
            
            return True
            
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False
            
    except requests.exceptions.Timeout:
        print(f"  ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
        return False
    except requests.exceptions.ConnectionError:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def read_image_links(image_links_file):
    """–ß–∏—Ç–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    links = []
    
    try:
        with open(image_links_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        for line in lines:
            if line.startswith('#') or not line.strip():
                continue
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "A1 1 : https://example.com"
            parts = line.strip().split(' : ', 1)
            if len(parts) == 2:
                display_name = parts[0].strip()
                url = parts[1].strip()
                links.append({
                    'display_name': display_name,
                    'url': url
                })
        
        return links
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {image_links_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {image_links_file}: {e}")
        return []

def create_error_placeholder(display_name, download_dir):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1920x1080 —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
        img = Image.new('RGB', (1920, 1080), color='white')
        draw = ImageDraw.Draw(img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç
            font_size = 60
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", font_size)
        except:
            try:
                font = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", font_size)
            except:
                font = ImageFont.load_default()
        
        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text = f"download_error {display_name}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        x = (1920 - text_width) // 2
        y = (1080 - text_height) // 2
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        draw.text((x, y), text, fill='black', font=font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        filename = display_name + '.jpg'
        filepath = os.path.join(download_dir, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        counter = 1
        original_filepath = filepath
        while os.path.exists(filepath):
            name_without_ext = os.path.splitext(original_filepath)[0]
            filepath = f"{name_without_ext}_{counter}.jpg"
            counter += 1
        
        img.save(filepath, 'JPEG', quality=95)
        print(f"  ‚úì –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: {os.path.basename(filepath)}")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏: {e}")
        return False

def log_download_error(display_name, url, error_file_path, download_dir):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É"""
    try:
        with open(error_file_path, 'a', encoding='utf-8') as f:
            f.write(f"{display_name} : {url}\n")
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
        create_error_placeholder(display_name, download_dir)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –æ—à–∏–±–æ–∫: {e}")

def main():
    print("=== –°–ö–†–ò–ü–¢ –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_and_install_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_name = get_project_name()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    downloads_dir = os.path.expanduser('~/Downloads')
    download_all_dir = os.path.join(downloads_dir, 'download_all')
    project_dir = os.path.join(download_all_dir, project_name)
    parse_links_dir = os.path.join(project_dir, '1_parse_links')
    pictures_dir = os.path.join(project_dir, '2_pictures')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
    if not os.path.exists(parse_links_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {parse_links_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç 1_parse_links.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    os.makedirs(pictures_dir, exist_ok=True)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_links_file = os.path.join(parse_links_dir, 'image_links.txt')
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–æ–∫
    error_file_path = os.path.join(pictures_dir, 'download_img_errors.txt')
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –æ—à–∏–±–æ–∫
    if os.path.exists(error_file_path):
        os.remove(error_file_path)
    
    print(f"\n=== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===")
    print(f"–ü—Ä–æ–µ–∫—Ç: {project_name}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {pictures_dir}")
    print(f"–§–∞–π–ª —Å —Å—Å—ã–ª–∫–∞–º–∏: {image_links_file}")
    print("–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JPG —Ñ–æ—Ä–º–∞—Ç")
    
    # –ß–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_links = read_image_links(image_links_file)
    
    if not image_links:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
        return
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(image_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    successful_downloads = 0
    failed_downloads = 0
    
    for i, link_info in enumerate(image_links, 1):
        print(f"\n[{i}/{len(image_links)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {link_info['display_name']}")
        
        if download_image(link_info['url'], link_info['display_name'], pictures_dir):
            successful_downloads += 1
        else:
            failed_downloads += 1
            log_download_error(link_info['display_name'], link_info['url'], error_file_path, pictures_dir)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.5)
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ===")
    print(f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {successful_downloads}")
    print(f"–û—à–∏–±–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {failed_downloads}")
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(image_links)}")
    
    if failed_downloads > 0:
        print(f"\n–û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {error_file_path}")
    
    print(f"\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JPG —Ñ–æ—Ä–º–∞—Ç–µ –≤: {pictures_dir}")

if __name__ == "__main__":
    main()
